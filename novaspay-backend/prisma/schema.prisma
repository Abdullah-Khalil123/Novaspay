generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ADMINS
model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  name            String?

  lastActive      DateTime?
  applications   Applications[]

  @@index([email])
}

model Transaction {
  id              Int       @id @default(autoincrement())
  orderId         String?
  accountName     String?
  paymentAccount  String?
  receiverName    String?
  receiverNumber  String?
  amount          Float?
  fee             Float?
  status          Status @default(PENDING)
  orderType       String?
  reason          String?

  clientId        Int?
  client          Client?   @relation(fields: [clientId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt 
}

model Account {

  id              Int      @id @default(autoincrement())
  bankingName     String?
  currency        String?
  clientName      String?
  ibanNumber      String? 
  balance         Float? @default(0)
  realBalance     Float? @default(0)
  accountNumber   String?
  accountName     String?
  bankingAddress  String?
  status          AccountStatus @default(ACTIVE)

  clientId        Int?
  client          Client?  @relation(fields: [clientId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model KYC {
  id              Int      @id @default(autoincrement())
  email           String
  type            String?
  name            String?
  phone           String?
  agentId         Int?
  status          Status @default(PENDING)
  reason          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OnBoarding {
  id                    Int      @id @default(autoincrement())
  clientName            String?
  accountErrorMessage   String?
  bankAccountStatusMsg  String?
  reason                String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model VA {
  id             Int      @id @default(autoincrement())
  purpose       String?
  currency      String?
  paymentMethod String?
  headquaters   String?
  state      String?
  city       String?
  street    String?
  postalCode String?
  businessCategory String?
  region         String?
  fundingSource  String?
  storePhotos    String[] @default([])
  declineReason  String?
  status         Status @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// CLIENTS
model Client {
  id            Int      @id @default(autoincrement())
  name          String?
  loginTime    DateTime?
  password      String?
  type          String?
  country      String?
  email        String? @unique
  agentName   String?
  bankAccountNumber String?
  description String?
  invitationCode String?
  accountInfo String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  accounts    Account[]
  transactions Transaction[]
  applications Applications[]
}

model Applications {
  id         Int      @id @default(autoincrement())
  clientId   Int?
  client     Client?   @relation(fields: [clientId], references: [id])

  area      String?
  vaBankAccount String?
  transactionType String?

  toCurrency String?
  fromCurrency String?
  amount    Float?
  cryptoAddress String?
  referenceRate Float?
  totalAmount Float?
  estimatedFee  Float?
  estimatedAmount Float?

  approverId Int?
  approver   User?    @relation(fields: [approverId], references: [id])

  approvalComments String?
  remark   String?
  status   Status @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  SUCCESS
  PENDING
  FAILED
  CANCELED
  IN_REVIEW
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}